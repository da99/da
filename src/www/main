#!/usr/bin/env bash

set -u -e -o pipefail

THIS_DIR="$(dirname "$0")"
#
# Color_Off='\e[0m'
# Bold="$(tput bold)"
# Reset='\e[0m'
# BRed='\e[1;31m'
# Red='\e[0;31m'
# Green='\e[0;32m'
# BGreen='\e[1;32m'
# Orange='\e[0;33m'
# BOrange='\e[1;33m'

ensure_build_dir() {
  public_dir="$(jq --raw-output .STATIC_DIR < tmp/settings.json)"
  build_dir="$(jq --raw-output .BUILD_DIR < tmp/settings.json)"
  if ! test -e "$public_dir" ; then
    echo "!!! $public_dir directory not found." >&2
    exit 1
  fi

  if test -e "$build_dir" ; then
    return 0
  fi

  rsync -a --exclude='*.mts' --exclude='*.rb' public/* build/
}

case "$*" in
  "public prune") # doc: CMD public prune (list)
    bun run "$THIS_DIR"/src/Public_File.mts "$@"
  ;;

  "public prune list")
    true
  ;;

  "public upload") # doc: CMD public upload (list)
    shift
    "$THIS_DIR"/src/PublicFile.rb "$@"
  ;;

  "public upload list")
    shift
    "$THIS_DIR"/src/PublicFile.rb "$@"
  ;;

  # doc: CMD public upload dir [DIR]
  "public upload dir "*)
    shift
    "$THIS_DIR"/src/PublicFile.rb "$@"
  ;;

  # doc: CMD update file manifest - Writes public_files.json
  "update file manifest")
    "$THIS_DIR"/src/PublicFile.rb "$@"
  ;;

  # doc: CMD update raw file manifest - Writes tmp/raw_files.json
  "update raw file manifest")
    "$THIS_DIR"/src/PublicFile.rb "$@"
  ;;

  'build dir reset') # doc: CMD build dir reset
    rm -rf build
    ensure_build_dir
    ;;

  'build file '*) # doc: CMD build file [FILE]
    file_name="$3"
    test -e build || { echo "!!! build dir does not exist."; exit 2; }

    case "$file_name" in
      *.html.rb)
        da www build html "$file_name"
        ;;
      *.css)
        da www build css "$file_name"
        ;;
      */index.mts)
        da www build mjs "$file_name"
        ;;
      *)
        echo "!!! Unknown file type: $file_name" >&2
        exit 1
        ;;
    esac
  ;;

  'build css'|'build css '*) # doc: CMD build css (FILE)
    ensure_build_dir
    build_css() {
      case "$1" in
        *section/base/*)
          echo "--- Skipping .css: $1"
          return 0
          ;;
      esac
      build_file=${1/public/build}
      echo "--- Processing .css: $build_file"
      bun x lightningcss --minify --bundle "$1" -o "$build_file"
    }

    case "$@" in
      'build css '*)
        name_of_file="$3"
        case "$name_of_file" in
          *section/base/*)
            true # continue as if compile everything
            ;;
          *)
            build_css "$3"
            exit 0
            ;;
        esac
        ;;
    esac

    while read -r LINE ; do
      build_css "$LINE"
    done < <( find public/section -maxdepth 2 -mindepth 2 -type f -iname '*.css')
    ;;

  'build html'|'build html '*) # doc: CMD build html (FILE)
    ensure_build_dir;

    build_html_file() {
      public_file="$1"
      new_file_ext=${public_file/.html.rb/.html}
      build_file="${new_file_ext/public/build}"
      echo "--- Processing .html: $build_file"
      ruby "$public_file" > "$build_file"
    }

    case "$@" in
      'build html '*)
        build_html_file "$3"
        exit 0
        ;;
    esac

    while read -r LINE ; do
      build_html_file "$LINE"
    done < <( find public/section -maxdepth 2 -mindepth 2 -type f -iname '*.html.rb')
    ;;

  'build mjs') # doc: CMD build mjs
    ensure_build_dir;
    # "$THIS_DIR"/src/PublicFile.rb build mjs
    set -x
    mts_files=$( find public/section -maxdepth 2 -mindepth 2 -type f -iname '*.mts' -and -not -iname '*.html.mts')
    test -n "$mts_files" || exit 2
    # index_mts=$( echo public/section/**/*.html.mts )
    bun build \
      --target browser \
      --outdir "$PWD"/build/section \
      --splitting \
      --chunk-naming "[dir]/lib.[name].[hash].mjs" \
      --entry-naming "[dir]/[name].mjs" \
      $mts_files
    # rm ${mts_files//public/build}
  ;;

  # doc: CMD list new|old files
  'list new files')
    bun run "$THIS_DIR"/src/Public_File.mts "$@"
  ;;

  'list old files') # doc
    bun run "$THIS_DIR"/src/Public_File.mts "$@"
  ;;

  'serve') # doc: CMD serve - Run CMD and serve static file using tmp/settings.json
    set -x
    bun run "$THIS_DIR"/src/Bun.Serve.ts "$@"
  ;;

  # doc: CMD mime [FILE]
  'mime '*)
    results="$(bun --eval "console.log(Bun.file('$2').type)")"
    case "$results" in
      "application/octet-stream")
        file --mime "$2" | cut -d':' -f2- | cut -d' ' -f2-
        ;;
      *)
        echo "$results"
        ;;
    esac
  ;;

  # doc: CMD modified manifest for [...DIRS] - Prints a list of files and their modified times.
  'modified manifest for '*)
    shift; shift; shift
    while read -r FPATH ; do
      echo "$FPATH $(stat -c '%y' "$FPATH")"
    done < <(find "$@" -type f | sort)
    ;;

  *)
    echo "!!! Unknown command: $*" >&2
    exit 1
  ;;
esac

