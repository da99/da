
import DA_STANDARD.SPECS;
import System.Console;

module DA_STANDARD.STRING
{

  void is_whitespace_specs() {
    should_eq(true, bool () { return is_whitespace("   "); });
    should_eq(false,bool () { return is_whitespace("");    });
  }

  bool is_whitespace(string v) {
    if (v.length > 0 && trim(v).length == 0)
      return true;
    return false;
  }

  void is_blank_specs() {
    should_eq(true,  bool () { return is_blank(""); });
    should_eq(true,  bool () { return is_blank("   "); });
    should_eq(false, bool () { return is_blank(" a  "); });
  }

  bool is_blank(string v) {
    return trim(v).length < 1;
  }

  void trim_specs() {
    should_eq("a", string () { return trim(" a    "); });
    should_eq(['a', 'b', 'c'], string[] () { return trim("a;b;c".split(';')); });
    should_eq(['a', 'b', 'c'], string[] () { return trim("a ; b; ;  c".split(/;/)); });
    should_eq(['a', 'c'],      string[] () { return trim("a; ;;;c".split(/;/)); });
    should_eq(['form', 'id'],  string[] () { return trim('form.id'.split('.')); });
  }

  // Use native String.prototype.trim
  //   because it handles more whitespace chars.
  string trim(string raw) {
    var o = raw;
    return o.trim(); 
  }

  string[] trim(string[] raw) {
    int len        = raw.length;
    string[] fin   = [];
    string trimmed = "";
    var o;
    for (int i = 0; i < len; i++) {
      o = raw[i];
      trimmed = o.trim();
      if (trimmed.length !== 0)
        fin.push(trimmed);
    }
    return fin;
  }

  void standard_name_specs() {
    should_eq("name name", string () { return standard_name('NAME NAME'); });  // it 'lowercases names'
    should_eq("name",      string () { return standard_name('  name  '); });   // it 'trims string'
    should_eq("n ame",     string () { return standard_name('n   aME');  });   // it 'squeezes whitespace'
  }

  string standard_name(string raw) {
    return trim(raw.replace(/[\s\uFEFF\xA0]+/g, ' ')).toLowerCase();
  }

} // === module DA_STANDARD

