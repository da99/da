#!/usr/bin/env ruby
# frozen_string_literal: true

require "#{ENV['DA_SRC']}/ruby_lib/shell"

cmd = ARGV.join(' ')
main_cmd = ARGV.first
prog = __FILE__.split('/')[-2]

case cmd
when '-h', '--help', 'help'
  puts "da #{Shell::String.bold prog} -h|--help|help  --  Show this message."
  puts "da #{Shell::String.bold prog} path/to/file    --  Extract documentation from file."
  exit 0

when 'help intro line'
  puts 'Extract documentation from a file.'
  exit 0
end

ftype = `file --mime "#{main_cmd}"`
case ftype
when /shellscript/
  contents = File.read(ARGV.last)
  sub_cmd = Shell::String.bold(File.basename(ARGV.last.sub(/\/main$/, '')))
  puts "#{sub_cmd} -h|--help|help #{Shell::String.yellow('- Show this message.')}"

  prefix = "#{sub_cmd}"
  contents.each_line do |line|
    results = line.split(/[\)]?\ +#\ +(doc\+|doc:||doc)(\ +.+)?$/)
    next if results.size == 1
    raw_txt, doc, raw_content = results
    txt = raw_txt.strip.gsub(/['"]/, '')
    content = Shell::String.format_command_comment(raw_content || '')

    case doc
    when 'doc'
      puts "#{prefix} #{txt}".strip
    when 'doc+'
      puts "#{prefix} #{Shell::String.remove_trailing_asterisk(txt)} #{content}".strip
      previous_or = false
    else
      puts "#{prefix} #{txt} #{content}".strip
    end

  end
else
  system(*ARGV, '--help')
end # case
