#!/usr/bin/env ruby
# frozen_string_literal: true

CMD = ENV['CMD'] || ENV['DA_CMD']
BOLD = `tput bold`.freeze
NORMAL = `tput sgr0`.freeze

def replace_cmd(str)
  str.sub('CMD', FORMATED_CMD).strip
end

def replace_options(str)
  str.gsub(/\[([^\]]+)\]/) do |x|
    "\e[33m#{x}\e[0m"
  end
end

def format_cmd(raw)
  main, *cmd = raw.split(/\s+/)
  return "#{BOLD}#{main}#{NORMAL}" if cmd.empty?

  "#{BOLD}#{main}#{NORMAL} #{cmd.join ' '}"
end

if $PROGRAM_NAME == __FILE__
  case ARGV.join(' ')
  when '-h', '--help'
    this_file = File.basename $PROGRAM_NAME
    puts "#{this_file} -h|--help    - Show this help message."
    puts "CMD=... #{this_file} FILE - Extract documentation."
  when /.+/
    PREFIX_DOC = %r{\s*(#|//)\s+doc:\s+}.freeze
    FORMATED_CMD = format_cmd(CMD || File.basename(ARGV.first))
    ARGV.each do |file_path|
      puts('-' * `tput cols`.strip.to_i)
      contents = File.read(file_path)
      contents.each_line do |raw_line|
        next unless raw_line.strip[PREFIX_DOC]

        line = raw_line.split(PREFIX_DOC).last
        puts replace_cmd(replace_options(line))
      end
    end
  else
    raise "Unknown arguments: #{ARGV.inspect}"
  end # case
end # if $PROGRAM_NAME
